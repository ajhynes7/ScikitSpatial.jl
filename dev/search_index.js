var documenterSearchIndex = {"docs":
[{"location":"types/plane/#Plane","page":"Plane","title":"Plane","text":"","category":"section"},{"location":"types/plane/","page":"Plane","title":"Plane","text":"A plane is defined by a point and a normal vector.","category":"page"},{"location":"types/plane/","page":"Plane","title":"Plane","text":"julia> using ScikitSpatial\n\njulia> plane = Plane([0, 0, 0], [0, 0, 1])\nPlane{3, Int64}([0, 0, 0], [0, 0, 1])\n\njulia> plane.point\n3-element StaticArrays.SVector{3, Int64} with indices SOneTo(3):\n 0\n 0\n 0\n\njulia> plane.vector\n3-element StaticArrays.SVector{3, Int64} with indices SOneTo(3):\n 0\n 0\n 1","category":"page"},{"location":"types/plane/","page":"Plane","title":"Plane","text":"The normal vector can also be accessed with the normal field.","category":"page"},{"location":"types/plane/","page":"Plane","title":"Plane","text":"julia> plane.normal\n3-element StaticArrays.SVector{3, Int64} with indices SOneTo(3):\n 0\n 0\n 1","category":"page"},{"location":"computations/measurement/#Measurement","page":"Measurement","title":"Measurement","text":"","category":"section"},{"location":"computations/measurement/","page":"Measurement","title":"Measurement","text":"cosine_similarity\nangle_between\ndistance","category":"page"},{"location":"computations/measurement/#ScikitSpatial.cosine_similarity","page":"Measurement","title":"ScikitSpatial.cosine_similarity","text":"cosine_similarity(u::AbstractVector, v::AbstractVector) -> Float\n\nCompute the cosine similarity of two vectors.\n\nExamples\n\njulia> cosine_similarity([1, 0], [1, 0])\n1.0\n\njulia> round(cosine_similarity([1,1], [1,0]), digits=3)\n0.707\n\njulia> cosine_similarity([1, 0], [0, 1])\n0.0\n\njulia> cosine_similarity([-1, 0], [1, 0])\n-1.0\n\njulia> round(cosine_similarity([1,0,0], [1,1,1]), digits=3)\n0.577\n\n\n\n\n\n","category":"function"},{"location":"computations/measurement/#ScikitSpatial.angle_between","page":"Measurement","title":"ScikitSpatial.angle_between","text":"angle_between(u::AbstractVector, v::AbstractVector) -> Float\n\nCompute the angle between two vectors. The angle is returned in radians.\n\nExamples\n\njulia> angle_between([1, 0], [1, 0])\n0.0\n\njulia> round(angle_between([1,1], [1,0]), digits=3)\n0.785\n\njulia> round(angle_between([1, 0], [0, 1]), digits=3)\n1.571\n\njulia> round(angle_between([-1, 0], [1, 0]), digits=3)\n3.142\n\njulia> round(angle_between([1,0,0], [1,1,1]), digits=3)\n0.955\n\n\n\n\n\n","category":"function"},{"location":"computations/measurement/#ScikitSpatial.distance","page":"Measurement","title":"ScikitSpatial.distance","text":"distance(point_a::AbstractVector, point_b::AbstractVector) -> Float\n\nCompute the distance between two points.\n\nExamples\n\njulia> distance([0, 0], [0, 0])\n0.0\n\njulia> distance([1, 0], [0, 0])\n1.0\n\njulia> round(distance([1, 1], [2, 2]), digits=3)\n1.414\n\njulia> round(distance([0, 0, 0], [-1, -1, -1]), digits=3)\n1.732\n\n\n\n\n\ndistance(point_a::AbstractVector, point_b::AbstractVector) -> Float\n\nCompute the distance from a point to a line.\n\nThis is the distance from the point to its projection on the line.\n\nExamples\n\njulia> distance([0, 0], Line([0, 0], [1, 0]))\n0.0\n\njulia> round(distance([1, 0], Line([0, 0], [1, 1])), digits=3)\n0.707\n\njulia> round(distance([1, 2, 3], Line([-1, 3, 2], [7, 4, 2])), digits=3)\n1.978\n\n\n\n\n\n","category":"function"},{"location":"types/line/#Line","page":"Line","title":"Line","text":"","category":"section"},{"location":"types/line/","page":"Line","title":"Line","text":"A line is defined by a point and a direction vector.","category":"page"},{"location":"types/line/","page":"Line","title":"Line","text":"julia> using ScikitSpatial\n\njulia> line = Line([0, 0], [1, 0])\nLine{2, Int64}([0, 0], [1, 0])\n\njulia> line.point\n2-element StaticArrays.SVector{2, Int64} with indices SOneTo(2):\n 0\n 0\n\njulia> line.vector\n2-element StaticArrays.SVector{2, Int64} with indices SOneTo(2):\n 1\n 0","category":"page"},{"location":"types/line/","page":"Line","title":"Line","text":"The direction vector can also be accessed with the direction field.","category":"page"},{"location":"types/line/","page":"Line","title":"Line","text":"julia> line.direction\n2-element StaticArrays.SVector{2, Int64} with indices SOneTo(2):\n 1\n 0","category":"page"},{"location":"#ScikitSpatial.jl","page":"Introduction","title":"ScikitSpatial.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Welcome to the ScikitSpatial.jl documentation!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"ScikitSpatial.jl provides types representing spatial entities, as well as functions for computations between them.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The following types are provided:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Line\nPlane\nCircle\nSphere","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Most of the computations fall into the following categories:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Measurement\nComparison\nProjection\nIntersection\nTransformation","category":"page"},{"location":"computations/projection/#Projection","page":"Projection","title":"Projection","text":"","category":"section"},{"location":"computations/projection/","page":"Projection","title":"Projection","text":"project","category":"page"},{"location":"computations/projection/#ScikitSpatial.project","page":"Projection","title":"ScikitSpatial.project","text":"project(u::AbstractVector, v::AbstractVector) -> AbstractVector\n\nProject vector u onto vector v.\n\nExamples\n\njulia> project([1, 1], [1, 0])\n2-element Base.Vector{Float64}:\n 1.0\n 0.0\n\njulia> project([5, 5], [1, 0])\n2-element Base.Vector{Float64}:\n 5.0\n 0.0\n\njulia> project([5, -5], [0, 1])\n2-element Base.Vector{Float64}:\n -0.0\n -5.0\n\n\n\n\n\nproject(point::AbstractVector, line::AbstractLine) -> StaticArrays.SVector\n\nProject a point onto a line.\n\nExamples\n\njulia> project([1, 1], Line([0, 0], [1, 0]))\n2-element StaticArrays.SVector{2, Float64} with indices SOneTo(2):\n 1.0\n 0.0\n\njulia> project([5, -1], Line([0, 0], [1, 0]))\n2-element StaticArrays.SVector{2, Float64} with indices SOneTo(2):\n 5.0\n 0.0\n\njulia> project([1, 0], Line([0, 0], [1, 1]))\n2-element StaticArrays.SVector{2, Float64} with indices SOneTo(2):\n 0.5\n 0.5\n\njulia> point = project([1, 0, 0], Line([0, 0, 0], [1, 1, 1]));\n\njulia> round.(point, digits=3)\n3-element StaticArrays.SVector{3, Float64} with indices SOneTo(3):\n 0.333\n 0.333\n 0.333\n\n\n\n\n\nproject(point::AbstractVector, plane::AbstractPlane) -> StaticArrays.SVector\n\nProject a point onto a plane.\n\nExamples\n\njulia> project([0, 0, 5], Plane([0, 0, 0], [0, 0, 1]))\n3-element StaticArrays.SVector{3, Float64} with indices SOneTo(3):\n 0.0\n 0.0\n 0.0\n\njulia> plane = Plane([1,2,3], [1, 3, -2]);\n\njulia> point_projected = project([5, 1, 3], plane);\n\njulia> round.(point_projected, digits=3)\n3-element StaticArrays.SVector{3, Float64} with indices SOneTo(3):\n 4.929\n 0.786\n 3.143\n\n\n\n\n\n","category":"function"}]
}
